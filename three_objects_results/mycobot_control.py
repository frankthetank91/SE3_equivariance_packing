import cv2
import numpy as np
import time
from pymycobot import MyCobot
# from pymycobot import cm
from scipy.interpolate import CubicSpline
import threading 
import time
"""

This code moves the Mycobot 280 M5 
1. Robot end-effector pose (x,y,z,rx,ry,rz) is used to create the trajectory
2. Camera attached to the end-effector is also streaming (RGB)

"""

# Initialize MyCobot and camera
mc = MyCobot('/dev/ttyACM0', 115200)  # Adjust the serial port if needed
mc.thread_lock = threading.Lock()

# End effector trajectory (Nx6 format, each row [x, y, z, rx, ry, rz])
#trajectory = np.array([
    #[0., 0., 0., 0.0, 0.0, 0.0],
    #[0.28001020960899203, -0.8377917133966778, -0.008412768997421239, -0.9055135709795931, 0.05217501543173618, 0.2753209931993714],
    #[10., 10., 10., 10., 10., 10.],
    #[20, 20, 20, 20, 20, 20],
    #[30, 30, 30, 30, 30, 30]
#])

'''
#### Height 0.1, Radius 0.05 ####
trajectory = np.array(np.rad2deg([
    [0, 0, 0, 0, 0, 0],
    [0.28093572001823175, -0.5994685335002516, -1.3459295497144128, 0.22079262392782936, 0.04417525461418829, 0.2775279301271318],
    [0.396417266989863, -0.6819183363359135, -1.140850581353991, 0.01571688536843613, -0.09565820851422113, -0.3776235152370078],
    [0.551045313643228, -0.4559983092220547, -1.5796065542632853, 0.3044246051917587, -0.2542729228769619, -0.9992118848541885],
    [0.6160493524482279, -0.19155589726500966, -2.1697304034006173, 0.8461903001618276, -0.3146759210210521, -1.7489918554255333],
    [0.5510453136428026, -0.4559983092218191, -1.5796065542644273, 0.30442460519433, -0.2542729228772012, -0.9992118848550425],
    [0.39641726698957963, -0.6819183363385676, -1.1408505813501821, 0.01571688536326684, -0.09565820851301461, -0.3776235152369938],
    [0.280935477165401, -0.5994708985340248, -1.3459255628055562, 0.22079068738880522, 0.04417526542657053, 0.27752767204344964],
    [0.09495007536793128, -0.8075650384520672, -0.940245728598549, -0.03215107546416008, 0.24627069528450252, 0.8543663992797035],
    [0.031564115141089887, -0.5159568533888651, -1.6341544113367528, 0.5898470492090295, 0.3215747246860168, 1.6040678436459463],
    [0.14276986687135093, -0.3328236295841054, -2.2043803274129887, 1.2271853792414402, 0.19065783341388282, 2.5240408120498627],
    [0, 0, 0, 0, 0, 0]
]))

#### Height 0.15, Radius 0.07 ####
trajectory = np.array(np.rad2deg([
    [0., 0., 0., 0.0, 0.0, 0.0],
    [0.2691811427222008, -0.6640307934839478, -0.7020073219749288, -0.36662965317191404, 0.0444308337863618, 0.26557367612976795],
    [0.4238034589705455, -0.9492861944215348, -0.11293904412186956, -0.7584452162270939, -0.09342154115478402, -0.34986127896499103],
    [0.6277294058760036, -0.41791041943715723, -1.0794380512464876, -0.26172568673857816, -0.2524691140683909, -0.919108457827656],
    [0.7475477401365194, 0.1532750486870262, -1.89125739979332, 0.18034458191946764, -0.3339855223197977, -1.6108724465550477],
    [0.6277294058740089, -0.41791041944233664, -1.0794380512522677, -0.261725686739649, -0.25246911406775246, -0.9191084578279696],
    [0.4238097566782208, -0.9486371202887021, -0.11433302848664689, -0.7577000169350498, -0.09342007786319562, -0.34985519191687353],
    [0.2691810687943584, -0.6640317698096599, -0.7020052654141621, -0.366630765011399, 0.04443082532820944, 0.26557360170280414],
    [0.048723975146812606, -1.0373544980247216, -0.018738157143269214, -0.7441587131532903, 0.24703706158039923, 0.8055983959864771],
    [-0.06733692463638768, -1.5234271291726287, 1.1893375639566128, -1.260260514607595, 0.33587567851999556, 1.4994638534612328],
    [0.05787719733202563, -1.7141012536007307, 2.024740877152873, -1.6257646968442154, 0.2214902757276232, 2.442653022550535],
    [0, 0, 0, 0, 0, 0]
]))

#### Height 0.2, Radius 0.1 ####
trajectory = np.array(np.rad2deg([
    [0., 0., 0., 0.0, 0.0, 0.0],
    [0.28001020960899203, -0.8377917133966778, -0.008412768997421239, -0.9055135709795931, 0.05217501543173618, 0.2753209931993714],
    [0.49105954201978697, -0.8688205298042573, -0.004981300068102736, -0.9823663568018975, -0.08720991205735378, -0.281904248090261],
    [0.7442043056245181, -0.7504016868195194, -0.015199447208621203, -1.0496257011841337, -0.25886327809594856, -0.794761008343975],
    [0.9694040132069561, -1.0248948086486818, 1.3243331209585232, -1.9427171150754514, -0.3711153777580813, -1.373182831090252], ### ISSUE WITH THIS LINE
    [0.7442043056245181, -0.7504016868195194, -0.015199447208621203, -1.0496257011841337, -0.25886327809594856, -0.794761008343975], # going back to center
    [0.49105954201613267, -0.8688205298197011, -0.0049813000978381145, -0.9823663568453709, -0.0872099120476876, -0.2819042480897628], # going back to center
    [0.28001020306954083, -0.8377916667471471, -0.008412680365384926, -0.9055134446301396, 0.05217498135265456, 0.27532100056129755], # start position
    [0.014983333034829351, -0.9239162389604842, -0.003908066811620541, -0.907946663653575, 0.26917045041645526, 0.764825395807968],
    [-0.20018290827683047, -0.7896232197798458, -0.029753949866653365, -0.8298553809971115, 0.3724467155259307, 1.3559279765244923],
    [-0.1043954111622556, -1.2296377820295161, 1.6166572629338283, -1.7111145682345035, 0.2927048301565635, 2.2883426751669163],
    [0, 0, 0, 0, 0, 0],
]))

## Height 0.3, Radius 0.15 ####
trajectory = np.array(np.rad2deg([
    [0, 0, 0, 0, 0, 0],
    [0.3246439924406036, -0.650157401238822, -0.0018424406653384864, -1.1012296535285782, 0.06344243175008056, 0.3190904844822756],
    [0.5859268686272515, -0.7055913750702567, -0.0014508166713987213, -1.166508022929219, -0.06462157426867395, -0.18986807299401004],
    [0.923925198483835, -0.5848380275390233, -0.0017351916398621757, -1.2803019546810264, -0.22583914976163885, -0.6139714574744205],
    [1.282310254423686, -0.24445306971477396, -0.0024887584773054193, -1.5184456128474504, -0.3515323085312689, -1.040047268963294],
    [0.9239251984575712, -0.5848380275875982, -0.0017351916854183695, -1.280301954703554, -0.22583914975295133, -0.6139714574784546],
    [0.5859268686368366, -0.7055913750038595, -0.0014508166061627727, -1.1665080228719107, -0.06462157428793998, -0.18986807299110608],
    [0.32464399244060366, -0.6501574012388222, -0.0018424406653383474, -1.1012296535285784, 0.0634424317500806, 0.31909048448227556],
    [-0.010072704201499966, -0.7677162788065847, -0.001341879594252856, -1.0820423819094847, 0.2780129511868667, 0.7374027271410133],
    [-0.2834021312495336, -0.6039210145075319, -0.002190689162662583, -1.0733646708319446, 0.38712043981306254, 1.2674829066383158],
    [-0.35433630486419976, -0.2391672652658838, -0.0059774033869834445, -1.1454880978723316, 0.36575238059181087, 2.0356817486547625],
    [0, 0, 0, 0, 0, 0]
]))
'''
### Height 0.4, Radius 0.2 ####
trajectory = np.array(np.rad2deg([
    [0, 0, 0, 0, 0, 0],
    [0.3642796249800495, -0.541266666868478, -0.0008818144004247664, -1.2064595410630823, 0.07261041671317753, 0.35835050429078447],
    [0.6621590804247827, -0.6133510338012733, -0.0007352098510016642, -1.2650687131434246, -0.04304558238588931, -0.11684375024202313],
    [1.0642030569595584, -0.5067545958212254, -0.0007525471689172372, -1.3891369315985542, -0.18846193499510003, -0.47702094180113763],
    [1.5236153303341946, -0.21955742473609233, -0.0007039642448231042, -1.6250388857181972, -0.3040851110648091, -0.792200784021983],
    [1.0642030568465173, -0.5067545959951226, -0.0007525473847267733, -1.389136931718415, -0.18846193496231775, -0.4770209418320808],
    [0.6621590804552652, -0.6133510335452318, -0.0007352094712303529, -1.2650687126038136, -0.04304558250607624, -0.11684375023264733],
    [0.36427962329731034, -0.5412666317657084, -0.0008817869777270721, -1.206459535152659, 0.07261041088107924, 0.35835050651335343],
    [-0.02385855548949912, -0.6769441472930964, -0.0007147769193398407, -1.1774897495610834, 0.2820520475298519, 0.7235796603919725],
    [-0.3366076588403836, -0.5049569240796594, -0.000939875291605685, -1.1898887255880832, 0.3920721104787039, 1.2123276905585938],
    [-0.433722950897426, -0.13216297911824584, -0.0011650667029410493, -1.2733766952281274, 0.3901301804877184, 1.956920639653841],
    [0, 0, 0, 0, 0, 0]
]))

# np.save('./h04R02.npy',trajectory)

# Interpolation for smooth trajectory (using cubic spline)
N = trajectory.shape[0]  # Number of waypoints
print(N)
time_points = np.linspace(0, 1, N)

# Function to move MyCobot smoothly through the trajectory
def move_robot_smoothly(trajectory):
    '''
    N = np.size(trajectory,0)
    for i in range(N):
        wi = trajectory[i,:].tolist()
        mc.send_angles(wi,20)
        time.sleep(1)
    mc.send_angles([0,0,0,0,0,0],30)
    '''
 
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print('Video stream is unavailable')
        exit()

    # Video writer setup : this is for streaming
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter('./output.avi', fourcc, 20.0, (640, 480))
    #out2 = cv2.VideoWriter('./output.mp4', fourcc, 20.0, (640, 480))

    N_poses = trajectory.shape[0]


    for i in range(N_poses):
        pose = trajectory[i,:]
        mc.send_angles(pose.tolist(),20)
        time.sleep(2)
    
        # ── flush stale camera frames ──────────────────────────
        for _ in range(5):                  # grab/drop 5 queued frames
            cap.grab()
        ret, frame = cap.retrieve()         # now pull the freshest one
        # ───────────────────────────────────────────────────────
        #ret,frame = cap.read()
        print(ret)
        # take frame
            # save the image to the ./output folder
        if not ret:
            continue

        cv2.imwrite(f"./output/{i}.png",frame)
        mc.wait(0.5)
        print("Pose",pose); print("Frame:",i)   



    cap.release()


if __name__ == "__main__":

    # Execute the smooth trajectory and capture video

    # Start capturing video and moving robot in parallel
    # capture_thread = threading.Thread(target=capture_and_save_video)
    # capture_thread.start()

    # Move robot smoothly along the trajectory
    move_robot_smoothly(trajectory)
    # mc.send_angles([0,0,0,0,0,0],10)

    # Wait until the video capture is done
    # capture_thread.join()
